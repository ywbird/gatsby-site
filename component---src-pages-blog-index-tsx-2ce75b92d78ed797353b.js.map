{"version":3,"file":"component---src-pages-blog-index-tsx-2ce75b92d78ed797353b.js","mappings":"yHA6FA,IA/Ee,SAAC,GAMT,IALLA,EAKI,EALJA,UACAC,EAII,EAJJA,SAKMC,GAAaC,EAAAA,EAAAA,IAAe,cAelC,OADAC,QAAQC,IAAIH,GAEVI,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,aACbD,EAAAA,cAAAA,QAAAA,KACGN,EADH,MACiBE,EAAKM,KAAKC,aAAaC,OAExCJ,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAACK,EAAAA,GAAD,CAAMC,GAAG,KACPN,EAAAA,cAAAA,MAAAA,CAEEO,IAAI,aACJC,IAAI,MACJP,UAAU,OACVQ,UAAU,QACVC,aAAc,SAACC,GACZA,EAAEC,OAA4BL,IAA/B,SACEM,KAAKC,UAAY,GAAM,IAAM,KAD/B,QAIFC,aAAc,SAACJ,GACZA,EAAEC,OAA4BL,IAA/B,gBAGJP,EAAAA,cAAAA,MAAAA,CAEEO,IAAKX,EAAKM,KAAKC,aAAaa,SAC5BR,IAAKZ,EAAKM,KAAKC,aAAaC,MAC5BH,UAAU,YACVQ,UAAU,YAIhBT,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,eAiBhBD,EAAAA,cAAAA,OAAAA,KACEA,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,WAAWP,GACxBC,M,8DCxCT,UA9BiB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAClB,OACEI,EAAAA,cAACiB,EAAAA,EAAD,CAAQvB,UAAU,iBACfE,EAAKsB,OAAOC,MAAMC,KAAI,SAACC,GAAD,OACrBrB,EAAAA,cAAAA,UAAAA,CAASsB,IAAKD,EAAKE,IACjBvB,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAACK,EAAAA,GAAD,CAAMC,GAAE,SAAWe,EAAKG,MAASH,EAAKI,YAAYrB,QAEpDJ,EAAAA,cAAAA,IAAAA,KAAIqB,EAAKI,YAAYC","sources":["webpack://test/./src/components/layout.tsx","webpack://test/./src/pages/blog/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\";\r\nimport \"./layout.scss\";\r\nimport { StaticImage } from \"gatsby-plugin-image\";\r\n\r\ninterface Data {\r\n  site: {\r\n    siteMetadata: {\r\n      title: string;\r\n      titleImg: string;\r\n      nav: { name: string; path: string }[];\r\n    };\r\n  };\r\n}\r\nconst Layout = ({\r\n  pageTitle,\r\n  children,\r\n}: {\r\n  pageTitle: string;\r\n  children: React.ReactNode | React.ReactNode[];\r\n}) => {\r\n  const data: Data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          titleImg\r\n          title\r\n          # nav {\r\n          #   name\r\n          #   path\r\n          # }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n  console.log(data);\r\n  return (\r\n    <div className=\"container\">\r\n      <title>\r\n        {pageTitle} | {data.site.siteMetadata.title}\r\n      </title>\r\n      <header>\r\n        <Link to=\"/\">\r\n          <img\r\n            // src={data.site.siteMetadata.titleImg}\r\n            src=\"/logo4.png\"\r\n            alt=\"cat\"\r\n            className=\"logo\"\r\n            draggable=\"false\"\r\n            onMouseEnter={(e: React.MouseEvent): void => {\r\n              (e.target as HTMLImageElement).src = `/logo${\r\n                Math.random() >= 0.5 ? \"2\" : \"3\"\r\n              }.png`;\r\n            }}\r\n            onMouseLeave={(e: React.MouseEvent): void => {\r\n              (e.target as HTMLImageElement).src = `/logo4.png`;\r\n            }}\r\n          />\r\n          <img\r\n            // src={data.site.siteMetadata.titleImg}\r\n            src={data.site.siteMetadata.titleImg}\r\n            alt={data.site.siteMetadata.title}\r\n            className=\"title-img\"\r\n            draggable=\"false\"\r\n          />\r\n        </Link>\r\n      </header>\r\n      <nav>\r\n        <ul className=\"nav-links\">\r\n          {/* {data.site.siteMetadata.nav.map((item, i) => (\r\n            <li key={i} className=\"nav-link-item\">\r\n              <Link\r\n                to={item.path}\r\n                className={`nav-link-text ${\r\n                  `${window.location.href}` === `${window.origin}${item.path}`\r\n                    ? \"current\"\r\n                    : \"\"\r\n                }`}\r\n              >\r\n                {item.name}\r\n              </Link>\r\n            </li>\r\n          ))} */}\r\n        </ul>\r\n      </nav>\r\n      <main>\r\n        <h1 className=\"heading\">{pageTitle}</h1>\r\n        {children}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import * as React from \"react\";\r\nimport { Link, graphql } from \"gatsby\";\r\nimport Layout from \"../../components/layout\";\r\n\r\ninterface DataType {\r\n  allMdx: {\r\n    nodes: {\r\n      frontmatter: {\r\n        date: string;\r\n        title: string;\r\n      };\r\n      id: string;\r\n      slug: string;\r\n    }[];\r\n  };\r\n}\r\n\r\nconst BlogPage = ({ data }: { data: DataType }) => {\r\n  return (\r\n    <Layout pageTitle=\"My Blog Posts\">\r\n      {data.allMdx.nodes.map((node) => (\r\n        <article key={node.id}>\r\n          <h2>\r\n            <Link to={`/blog/${node.slug}`}>{node.frontmatter.title}</Link>\r\n          </h2>\r\n          <p>{node.frontmatter.date}</p>\r\n        </article>\r\n      ))}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMdx(sort: { fields: frontmatter___date, order: DESC }) {\r\n      nodes {\r\n        frontmatter {\r\n          date(formatString: \"MMMM D, YYYY\")\r\n          title\r\n        }\r\n        id\r\n        slug\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default BlogPage;\r\n"],"names":["pageTitle","children","data","useStaticQuery","console","log","React","className","site","siteMetadata","title","Link","to","src","alt","draggable","onMouseEnter","e","target","Math","random","onMouseLeave","titleImg","Layout","allMdx","nodes","map","node","key","id","slug","frontmatter","date"],"sourceRoot":""}